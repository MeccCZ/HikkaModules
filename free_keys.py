import asyncio
import logging
from telethon import types
from telethon.tl.functions.messages import CreateChatRequest
from telethon.tl.functions.channels import InviteToChannelRequest
from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class FreeKeysMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç /try –±–æ—Ç—É @ExodusLucky_bot –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Ç"""
    
    strings = {
        "name": "FreeKeys",
        "enabled": "‚úÖ –ú–æ–¥—É–ª—å FreeKeys –≤–∫–ª—é—á–µ–Ω",
        "disabled": "‚ùå –ú–æ–¥—É–ª—å FreeKeys –≤—ã–∫–ª—é—á–µ–Ω",
        "status_enabled": "‚úÖ –°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è: –í–∫–ª—é—á–µ–Ω",
        "status_disabled": "‚ùå –°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è: –í—ã–∫–ª—é—á–µ–Ω",
        "bot_not_found": "‚ùå –ë–æ—Ç @ExodusLucky_bot –Ω–µ –Ω–∞–π–¥–µ–Ω",
        "chat_not_found": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –Ω–∞–π—Ç–∏ —á–∞—Ç KEYS FREE",
        "started": "üîÑ –ó–∞–ø—É—â–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–∑–æ–≤...",
    }
    
    async def client_ready(self, client, db):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è"""
        self._client = client
        self._db = db
        self._bot_id = None
        self._chat_id = None
        self._is_enabled = self._db.get(self.strings["name"], "enabled", False)
        self._handler_added = False
        
        # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –±–æ—Ç–∞ –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É
        try:
            bot_entity = await client.get_entity("@ExodusLucky_bot")
            self._bot_id = bot_entity.id
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–æ—Ç–∞: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
        await self._ensure_chat_exists()
        
        # –ï—Å–ª–∏ –º–æ–¥—É–ª—å –±—ã–ª –≤–∫–ª—é—á–µ–Ω –¥–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏, –≤–∫–ª—é—á–∞–µ–º –µ–≥–æ —Å–Ω–æ–≤–∞
        if self._is_enabled:
            self._add_handler()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥—É /try, –µ—Å–ª–∏ –º–æ–¥—É–ª—å –±—ã–ª –≤–∫–ª—é—á–µ–Ω
            await self._send_try()
            
    async def _ensure_chat_exists(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π"""
        for dialog in await self._client.get_dialogs():
            if dialog.title == "KEYS FREE":
                self._chat_id = dialog.entity.id
                return
                
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            result = await self._client(CreateChatRequest(
                users=["me"],
                title="KEYS FREE"
            ))
            self._chat_id = result.chats[0].id
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç KEYS FREE —Å ID {self._chat_id}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç: {e}")
    
    def _add_handler(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self._handler_added and self._bot_id:
            self._client.add_event_handler(
                self._message_handler,
                types.events.NewMessage(from_users=[self._bot_id])
            )
            self._handler_added = True
            logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω")
    
    def _remove_handler(self):
        """–£–¥–∞–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if self._handler_added:
            self._client.remove_event_handler(self._message_handler)
            self._handler_added = False
            logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —É–¥–∞–ª–µ–Ω")
    
    async def _send_try(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /try –±–æ—Ç—É"""
        if self._bot_id and self._is_enabled:
            await self._client.send_message("@ExodusLucky_bot", "/try")
            logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /try")
    
    @loader.command
    async def keyon(self, message):
        """–í–∫–ª—é—á–∞–µ—Ç –º–æ–¥—É–ª—å"""
        if not self._bot_id:
            await utils.answer(message, self.strings["bot_not_found"])
            return
            
        if not self._chat_id:
            await self._ensure_chat_exists()
            if not self._chat_id:
                await utils.answer(message, self.strings["chat_not_found"])
                return
        
        self._is_enabled = True
        self._db.set(self.strings["name"], "enabled", True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
        self._add_handler()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥—É /try
        await self._send_try()
        
        await utils.answer(message, self.strings["enabled"])
    
    @loader.command
    async def keyoff(self, message):
        """–í—ã–∫–ª—é—á–∞–µ—Ç –º–æ–¥—É–ª—å"""
        self._is_enabled = False
        self._db.set(self.strings["name"], "enabled", False)
        
        # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω
        self._remove_handler()
        
        await utils.answer(message, self.strings["disabled"])
    
    @loader.command
    async def keystatus(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è"""
        status = self.strings["status_enabled"] if self._is_enabled else self.strings["status_disabled"]
        chat_status = f"üó£ –ß–∞—Ç: {'‚úÖ –ù–∞–π–¥–µ–Ω' if self._chat_id else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}"
        bot_status = f"ü§ñ –ë–æ—Ç: {'‚úÖ –ù–∞–π–¥–µ–Ω' if self._bot_id else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}"
        handler_status = f"üëÅ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–æ' if self._handler_added else '‚ùå –ù–µ –∞–∫—Ç–∏–≤–Ω–æ'}"
        
        status_text = f"{status}\n\n{bot_status}\n{chat_status}\n{handler_status}"
        
        await utils.answer(message, status_text)
    
    @loader.command
    async def trykey(self, message):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø—Ä–∏–∑—ã"""
        if not self._bot_id:
            await utils.answer(message, self.strings["bot_not_found"])
            return
            
        if not self._chat_id:
            await self._ensure_chat_exists()
            if not self._chat_id:
                await utils.answer(message, self.strings["chat_not_found"])
                return
        
        # –í–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω
        if not self._is_enabled:
            self._is_enabled = True
            self._db.set(self.strings["name"], "enabled", True)
            self._add_handler()
        
        await utils.answer(message, self.strings["started"])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥—É /try
        await self._send_try()
        
    async def _message_handler(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞"""
        if not self._is_enabled:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = event.message.text or ""
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
        if "–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞!" in message_text:
            await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            await self._send_try()
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–∏–≥—Ä—ã—à
        if "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º" in message_text or "–°–∏—Å—Ç–µ–º–Ω—ã–π –¥–∂–µ–∫–ø–æ—Ç" in message_text:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Ç
            try:
                await self._client.forward_messages(
                    entity=self._chat_id,
                    messages=[event.message]
                )
                logger.info("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—ã–∏–≥—Ä—ã—à! –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ —á–∞—Ç KEYS FREE")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
    async def on_unload(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è"""
        # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
        self._remove_handler() 