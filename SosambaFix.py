version = (1, 4, 8, 8)
#meta developer: @moduleslist

from .. import loader, utils
from telethon.tl.types import Message
from telethon.tl.functions.channels import JoinChannelRequest
import re

@loader.tds
class SosambaModule(loader.Module):
    """—Å–æ—Å–∞–ª?"""

    strings = {
        "name": "Sosamba",
        "enabled": "‚úÖ <b>–ú–æ–¥—É–ª—å –≤–∫–ª—é—á–µ–Ω</b>",
        "disabled": "üö´ <b>–ú–æ–¥—É–ª—å –≤—ã–∫–ª—é—á–µ–Ω</b>",
        "config_changed": "‚úÖ <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞</b>"
    }

    trigger_words = [
        "–¥–∞", "–∫–æ–Ω–µ—á–Ω–æ", "–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ", "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å", "–∞–≥–∞",
        "–î–∞", "–ö–æ–Ω–µ—á–Ω–æ", "–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ", "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å", "–ê–≥–∞",
        "–î–æ", "–¥–æ"
    ]

    defaults = {
        "replacement_text": "—Å–æ—Å–∞–ª?"
    }

    def init(self):
        self._db = None
        self._client = None

    async def client_ready(self, client, db):
        self._db = db
        self._client = client

        await client(JoinChannelRequest(channel="@moduleslist"))

    def _is_enabled(self) -> bool:
        return self._db.get(self.strings["name"], "enabled", False)

    def _check_trigger(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä-—Å–ª–æ–≤–∞"""
        return any(text.strip().startswith(word) for word in self.trigger_words)

    @loader.command()
    async def sosamba(self, message: Message):
        """üëª –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å"""
        current_state = self._is_enabled()
        new_state = not current_state
        self._db.set(self.strings["name"], "enabled", new_state)
        await utils.answer(
            message,
            self.strings["enabled"] if new_state else self.strings["disabled"]
        )

    @loader.watcher()
    async def watcher(self, message: Message):
        if not self._is_enabled():
            return

        if not message.is_reply:
            return

        try:
            replied = await message.get_reply_message()
            me = await message.client.get_me()

            if not replied.sender_id == me.id:
                return

            if not message.text or not self._check_trigger(message.text):
                return

            await message.client.edit_message(
                replied.chat_id,
                replied.id,
                self.get("replacement_text")
            )
        except Exception:
            pass

    @loader.command()
    async def sostext(self, message: Message):
        """üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–º–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .sostext <—Ç–µ–∫—Å—Ç>"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(
                message,
                f"üîß <b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ–Ω—ã:</b> <code>{self.get('replacement_text')}</code>"
            )
            return

        self.set("replacement_text", args)
        await utils.answer(message, self.strings["config_changed"])