# 
# ‚ñà‚ñÄ‚ñÄ ‚ñÄ‚ñÑ‚ñÄ ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà‚ñë‚ñà ‚ñà‚ñÄ ‚ñà‚ñë‚ñë ‚ñà‚ñë‚ñà ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñà‚ñÑ‚ñà
# ‚ñà‚ñà‚ñÑ ‚ñà‚ñë‚ñà ‚ñà‚ñÑ‚ñà ‚ñà‚ñÑ‚ñÄ ‚ñà‚ñÑ‚ñà ‚ñÑ‚ñà ‚ñà‚ñÑ‚ñÑ ‚ñà‚ñÑ‚ñà ‚ñà‚ñÑ‚ñÑ ‚ñà‚ñë‚ñà ‚ñë‚ñà‚ñë
# 
# –ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã /try –≤ @ExodusLucky_bot
# –ò–Ω—Ç–µ—Ä–≤–∞–ª: 11 –º–∏–Ω—É—Ç
#
# –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @antml

import asyncio
import logging
from telethon.tl.functions.messages import GetPeerDialogsRequest

from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class ExodusLuckyMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /try –±–æ—Ç—É @ExodusLucky_bot —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º"""
    
    strings = {
        "name": "ExodusLucky",
        "started": "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã /try –±–æ—Ç—É @ExodusLucky_bot –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞",
        "stopped": "üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã /try –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "status_on": "‚úÖ –°—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–Ω–æ (–∏–Ω—Ç–µ—Ä–≤–∞–ª 11 –º–∏–Ω—É—Ç)",
        "status_off": "üõë –°—Ç–∞—Ç—É—Å: –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ",
        "already_running": "‚ö†Ô∏è –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞",
        "not_running": "‚ö†Ô∏è –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞",
    }
    
    def __init__(self):
        self.config = loader.ModuleConfig(
            "INTERVAL", 11, "–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö",
        )
        self.task = None
        self.bot_username = "ExodusLucky_bot"
    
    async def client_ready(self, client, db):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        self.client = client
        self.db = db
        self._running = False
    
    async def get_bot_entity(self):
        """–ü–æ–ª—É—á–∞–µ—Ç Entity –±–æ—Ç–∞"""
        return await self.client.get_entity(self.bot_username)
    
    async def exoduslucky_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            bot_entity = await self.get_bot_entity()
            interval_seconds = self.config["INTERVAL"] * 60
            
            while self._running:
                try:
                    await self.client.send_message(bot_entity, "/try")
                    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /try –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–æ—Ç—É {self.bot_username}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
                
                await asyncio.sleep(interval_seconds)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ exoduslucky_loop: {str(e)}")
            self._running = False
    
    async def exluckyoncmd(self, message):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É"""
        if self._running:
            return await utils.answer(message, self.strings["already_running"])
        
        self._running = True
        self.task = asyncio.create_task(self.exoduslucky_loop())
        await utils.answer(message, self.strings["started"])
    
    async def exluckyoffcmd(self, message):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É"""
        if not self._running:
            return await utils.answer(message, self.strings["not_running"])
        
        self._running = False
        if self.task and not self.task.cancelled():
            self.task.cancel()
        
        await utils.answer(message, self.strings["stopped"])
    
    async def exluckystatuscmd(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        if self._running:
            await utils.answer(message, self.strings["status_on"])
        else:
            await utils.answer(message, self.strings["status_off"]) 