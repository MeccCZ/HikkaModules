# 
# ‚ñà‚ñÄ‚ñÄ ‚ñÄ‚ñÑ‚ñÄ ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà‚ñë‚ñà ‚ñà‚ñÄ ‚ñà‚ñë‚ñë ‚ñà‚ñë‚ñà ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñà‚ñÑ‚ñà
# ‚ñà‚ñà‚ñÑ ‚ñà‚ñë‚ñà ‚ñà‚ñÑ‚ñà ‚ñà‚ñÑ‚ñÄ ‚ñà‚ñÑ‚ñà ‚ñÑ‚ñà ‚ñà‚ñÑ‚ñÑ ‚ñà‚ñÑ‚ñà ‚ñà‚ñÑ‚ñÑ ‚ñà‚ñë‚ñà ‚ñë‚ñà‚ñë
# 
# –ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã /try –≤ @ExodusLucky_bot
# –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –∏ –∂–¥–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è + 1 –º–∏–Ω—É—Ç–∞
#
# –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @MeccCZ

import asyncio
import logging
import re
from telethon import events

from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class ExodusLuckyMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /try –±–æ—Ç—É @ExodusLucky_bot —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
    
    strings = {
        "name": "ExodusLucky",
        "started": "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã /try –±–æ—Ç—É @ExodusLucky_bot –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞",
        "stopped": "üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã /try –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "status_on": "‚úÖ –°—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–Ω–æ (–æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ + 1 –º–∏–Ω—É—Ç–∞)",
        "status_off": "üõë –°—Ç–∞—Ç—É—Å: –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ",
        "already_running": "‚ö†Ô∏è –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞",
        "not_running": "‚ö†Ô∏è –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞",
        "waiting": "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ: {wait_time} –º–∏–Ω—É—Ç",
    }
    
    def __init__(self):
        self.config = loader.ModuleConfig(
            "DEFAULT_INTERVAL", 11, "–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (–µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–∑ –æ—Ç–≤–µ—Ç–∞)",
            "ADDITIONAL_MINUTES", 1, "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö",
        )
        self.task = None
        self.bot_username = "ExodusLucky_bot"
        self._bot_id = None
        self._waiting_event = None
        self._next_wait_time = None
    
    async def client_ready(self, client, db):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        self.client = client
        self.db = db
        self._running = False
        self._waiting_event = asyncio.Event()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –±–æ—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            bot_entity = await self.client.get_entity(self.bot_username)
            self._bot_id = bot_entity.id
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞
            self.client.add_event_handler(
                self._handle_bot_response,
                events.NewMessage(from_users=self._bot_id)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è: {str(e)}")
    
    async def _handle_bot_response(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –æ—Ç –±–æ—Ç–∞"""
        if not self._running:
            return
            
        try:
            message_text = event.message.text
            
            # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
            wait_time_match = re.search(r'—á–µ—Ä–µ–∑ (\d+) –º–∏–Ω—É—Ç', message_text)
            if wait_time_match:
                wait_minutes = int(wait_time_match.group(1))
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –º–∏–Ω—É—Ç—É
                self._next_wait_time = wait_minutes + self.config["ADDITIONAL_MINUTES"]
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {wait_minutes} –º–∏–Ω—É—Ç, —Å–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {self._next_wait_time} –º–∏–Ω—É—Ç")
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–ª–µ–¥—É—é—â–µ–º –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
                await self.client.send_message(
                    "me",
                    self.strings["waiting"].format(wait_time=self._next_wait_time)
                )
                
                # –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—É, —á—Ç–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
                self._waiting_event.set()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞: {str(e)}")
    
    async def get_bot_entity(self):
        """–ü–æ–ª—É—á–∞–µ—Ç Entity –±–æ—Ç–∞"""
        return await self.client.get_entity(self.bot_username)
    
    async def exoduslucky_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            bot_entity = await self.get_bot_entity()
            default_interval = self.config["DEFAULT_INTERVAL"] * 60
            
            while self._running:
                try:
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–æ–º–∞–Ω–¥—ã
                    self._waiting_event.clear()
                    self._next_wait_time = None
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
                    await self.client.send_message(bot_entity, "/try")
                    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /try –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–æ—Ç—É {self.bot_username}")
                    
                    # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–æ–º (–º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥)
                    try:
                        await asyncio.wait_for(self._waiting_event.wait(), timeout=10)
                    except asyncio.TimeoutError:
                        logger.warning("–¢–∞–π–º-–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª")
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                    wait_seconds = (self._next_wait_time * 60) if self._next_wait_time else default_interval
                    logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {wait_seconds/60} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏")
                    
                    # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                    await asyncio.sleep(wait_seconds)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
                    await asyncio.sleep(default_interval)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ exoduslucky_loop: {str(e)}")
            self._running = False
    
    async def exluckyoncmd(self, message):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É"""
        if self._running:
            return await utils.answer(message, self.strings["already_running"])
        
        self._running = True
        self.task = asyncio.create_task(self.exoduslucky_loop())
        await utils.answer(message, self.strings["started"])
    
    async def exluckyoffcmd(self, message):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É"""
        if not self._running:
            return await utils.answer(message, self.strings["not_running"])
        
        self._running = False
        if self.task and not self.task.cancelled():
            self.task.cancel()
        
        await utils.answer(message, self.strings["stopped"])
    
    async def exluckystatuscmd(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        if self._running:
            status_text = self.strings["status_on"]
            if self._next_wait_time:
                status_text += f"\n‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞: —á–µ—Ä–µ–∑ {self._next_wait_time} –º–∏–Ω—É—Ç"
            await utils.answer(message, status_text)
        else:
            await utils.answer(message, self.strings["status_off"]) 