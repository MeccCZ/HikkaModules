# ‚ñà ‚ñà ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÄ    ‚ñÑ‚ñÄ‚ñà ‚ñÄ‚ñà‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà ‚ñÑ‚ñÄ‚ñà
# ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà ‚ñÑ  ‚ñà‚ñÄ‚ñà  ‚ñà  ‚ñà‚ñÄ‚ñà ‚ñà ‚ñÄ ‚ñà ‚ñà‚ñÄ‚ñà
#
#              ¬© Copyright 2022
#
#          https://t.me/hikariatama
#
# üîí Licensed under the GNU GPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta developer: @hikariatama

from .. import loader, utils
from telethon import events, types
import logging
import re
import emoji

logger = logging.getLogger(__name__)

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç–µ
EMOJI_PATTERN = re.compile(
    "["
    "\U0001F1E0-\U0001F1FF"  # flags (iOS)
    "\U0001F300-\U0001F5FF"  # symbols & pictographs
    "\U0001F600-\U0001F64F"  # emoticons
    "\U0001F680-\U0001F6FF"  # transport & map symbols
    "\U0001F700-\U0001F77F"  # alchemical symbols
    "\U0001F780-\U0001F7FF"  # Geometric Shapes
    "\U0001F800-\U0001F8FF"  # Supplemental Arrows-C
    "\U0001F900-\U0001F9FF"  # Supplemental Symbols and Pictographs
    "\U0001FA00-\U0001FA6F"  # Chess Symbols
    "\U0001FA70-\U0001FAFF"  # Symbols and Pictographs Extended-A
    "\U00002702-\U000027B0"  # Dingbats
    "\U000024C2-\U0001F251"
    "]+"
)

@loader.tds
class AntiRomaMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç–º–æ–¥–∂–∏ –∏–∑ —á–∞—Ç–∞ –≤ Telegram"""

    strings = {
        "name": "AntiRoma",
        "banned_anim": "‚úÖ <b>–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∂–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ</b>",
        "unbanned_anim": "‚úÖ <b>–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∂–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ</b>",
        "banned_pack": "‚úÖ <b>–≠–º–æ–¥–∂–∏–ø–∞–∫ {} –∑–∞–ø—Ä–µ—â–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ</b>",
        "unbanned_pack": "‚úÖ <b>–≠–º–æ–¥–∂–∏–ø–∞–∫ {} —Ä–∞–∑—Ä–µ—à–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ</b>",
        "banned_stick": "‚úÖ <b>–≠–º–æ–¥–∂–∏ {} –∑–∞–ø—Ä–µ—â–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ</b>",
        "unbanned_stick": "‚úÖ <b>–≠–º–æ–¥–∂–∏ {} —Ä–∞–∑—Ä–µ—à–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ</b>",
        "all_unbanned": "‚úÖ <b>–í—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —ç–º–æ–¥–∂–∏ —Å–Ω—è—Ç—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ</b>",
        "no_reply": "‚ùå <b>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å—Ç–∏–∫–µ—Ä</b>",
        "debug": "üîÑ <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∏–ø–æ–º: {}</b>",
        "banned_regular": "‚úÖ <b>–û–±—ã—á–Ω—ã–µ —ç–º–æ–¥–∂–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ</b>",
        "unbanned_regular": "‚úÖ <b>–û–±—ã—á–Ω—ã–µ —ç–º–æ–¥–∂–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ</b>",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "banned_chats_anim", [], "–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å –∑–∞–ø—Ä–µ—Ç–æ–º –Ω–∞ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∂–∏",
            "banned_packs", {}, "–°–ª–æ–≤–∞—Ä—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —ç–º–æ–¥–∂–∏–ø–∞–∫–æ–≤ –ø–æ —á–∞—Ç–∞–º",
            "banned_stickers", {}, "–°–ª–æ–≤–∞—Ä—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —ç–º–æ–¥–∂–∏ –ø–æ —á–∞—Ç–∞–º",
            "debug_mode", False, "–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º",
            "banned_chats_regular", [], "–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å –∑–∞–ø—Ä–µ—Ç–æ–º –Ω–∞ –æ–±—ã—á–Ω—ã–µ —ç–º–æ–¥–∂–∏",
        )

    async def client_ready(self, client, db):
        self.db = db
        self.client = client
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        client.add_event_handler(
            self.check_message,
            events.NewMessage()
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        client.add_event_handler(
            self.check_message,
            events.MessageEdited()
        )
    
    async def check_message(self, event):
        try:
            chat_id = utils.get_chat_id(event)
            
            # –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
            if self.config["debug_mode"]:
                if hasattr(event, "message") and event.message:
                    media_type = type(event.message.media).__name__ if event.message.media else "–ù–µ—Ç –º–µ–¥–∏–∞"
                    await self.client.send_message(
                        chat_id, 
                        self.strings("debug").format(media_type)
                    )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—ã—á–Ω—ã–µ —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç–µ
            if chat_id in self.config["banned_chats_regular"] and hasattr(event, "message") and event.message:
                if event.message.text:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç–µ
                    if EMOJI_PATTERN.search(event.message.text) or emoji.emoji_count(event.message.text) > 0:
                        await event.delete()
                        return
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—ã—á–Ω—ã–µ —ç–º–æ–¥–∑–∏-—Å—Ç–∏–∫–µ—Ä—ã
                if event.message.media:
                    if isinstance(event.message.media, types.MessageMediaWebPage):
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —ç–º–æ–¥–∑–∏ –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
                        if hasattr(event.message.media.webpage, "title"):
                            if EMOJI_PATTERN.search(event.message.media.webpage.title) or emoji.emoji_count(event.message.media.webpage.title) > 0:
                                await event.delete()
                                return
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—ã—á–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã (–Ω–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
                    if hasattr(event.message.media, "document"):
                        doc = event.message.media.document
                        if hasattr(doc, "mime_type") and doc.mime_type == "image/webp":
                            # –≠—Ç–æ –æ–±—ã—á–Ω—ã–π —Å—Ç–∏–∫–µ—Ä
                            await event.delete()
                            return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∂–∏
            if chat_id in self.config["banned_chats_anim"]:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ CustomEmoji (–Ω–æ–≤—ã–π —Ç–∏–ø –¥–ª—è —ç–º–æ–¥–∑–∏)
                if hasattr(event, "message") and event.message:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ CustomEmoji –≤ entities
                    if event.message.entities:
                        for entity in event.message.entities:
                            if isinstance(entity, types.MessageEntityCustomEmoji):
                                await event.delete()
                                return
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–µ–¥–∏–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
                    if event.message.media:
                        if hasattr(event.message.media, "document"):
                            doc = event.message.media.document
                            if hasattr(doc, "attributes"):
                                for attr in doc.attributes:
                                    if getattr(attr, "animated", False):
                                        await event.delete()
                                        return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —ç–º–æ–¥–∂–∏–ø–∞–∫–∏
            if str(chat_id) in self.config["banned_packs"] and event.message and event.message.media:
                if hasattr(event.message.media, "document"):
                    doc = event.message.media.document
                    if hasattr(doc, "attributes"):
                        for attr in doc.attributes:
                            if hasattr(attr, "stickerset") and attr.stickerset:
                                if attr.stickerset.id in self.config["banned_packs"][str(chat_id)]:
                                    await event.delete()
                                    return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã
            if str(chat_id) in self.config["banned_stickers"] and event.message and event.message.media:
                if hasattr(event.message.media, "document"):
                    doc = event.message.media.document
                    if doc.id in self.config["banned_stickers"][str(chat_id)]:
                        await event.delete()
                        return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    @loader.command(ru_doc="–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∂–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ")
    async def bananim(self, message):
        """Ban animated emojis in this chat"""
        chat_id = utils.get_chat_id(message)
        
        if chat_id not in self.config["banned_chats_anim"]:
            self.config["banned_chats_anim"].append(chat_id)
            await utils.answer(message, self.strings("banned_anim"))
        else:
            await utils.answer(message, self.strings("banned_anim"))
    
    @loader.command(ru_doc="–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –æ–±—ã—á–Ω—ã–µ —ç–º–æ–¥–∂–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ")
    async def banemoji(self, message):
        """Ban regular emojis in this chat"""
        chat_id = utils.get_chat_id(message)
        
        if chat_id not in self.config["banned_chats_regular"]:
            self.config["banned_chats_regular"].append(chat_id)
            await utils.answer(message, self.strings("banned_regular"))
        else:
            await utils.answer(message, self.strings("banned_regular"))
    
    @loader.command(ru_doc="–†–∞–∑—Ä–µ—à–∏—Ç—å –æ–±—ã—á–Ω—ã–µ —ç–º–æ–¥–∂–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ")
    async def unbanemoji(self, message):
        """Unban regular emojis in this chat"""
        chat_id = utils.get_chat_id(message)
        
        if chat_id in self.config["banned_chats_regular"]:
            self.config["banned_chats_regular"].remove(chat_id)
            await utils.answer(message, self.strings("unbanned_regular"))
        else:
            await utils.answer(message, self.strings("unbanned_regular"))
    
    @loader.command(ru_doc="–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏")
    async def debugmode(self, message):
        """Toggle debug mode for emoji detection"""
        self.config["debug_mode"] = not self.config["debug_mode"]
        status = "–≤–∫–ª—é—á–µ–Ω" if self.config["debug_mode"] else "–≤—ã–∫–ª—é—á–µ–Ω"
        await utils.answer(message, f"‚úÖ <b>–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ {status}</b>")
    
    @loader.command(ru_doc="–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –≤–µ—Å—å —ç–º–æ–¥–∂–∏–ø–∞–∫ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ")
    async def banpack(self, message):
        """Ban emoji pack in this chat"""
        chat_id = utils.get_chat_id(message)
        reply = await message.get_reply_message()
        
        if not reply or not reply.media:
            await utils.answer(message, self.strings("no_reply"))
            return
        
        if hasattr(reply.media, "document"):
            for attr in reply.media.document.attributes:
                if hasattr(attr, "stickerset") and attr.stickerset:
                    pack_id = attr.stickerset.id
                    pack_name = attr.stickerset.short_name
                    
                    if str(chat_id) not in self.config["banned_packs"]:
                        self.config["banned_packs"][str(chat_id)] = []
                    
                    if pack_id not in self.config["banned_packs"][str(chat_id)]:
                        self.config["banned_packs"][str(chat_id)].append(pack_id)
                    
                    await utils.answer(message, self.strings("banned_pack").format(pack_name))
                    return
        
        await utils.answer(message, self.strings("no_reply"))
    
    @loader.command(ru_doc="–ó–∞–ø—Ä–µ—Ç–∏—Ç—å —ç–º–æ–¥–∂–∏ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ")
    async def banstick(self, message):
        """Ban emoji in this chat"""
        chat_id = utils.get_chat_id(message)
        reply = await message.get_reply_message()
        
        if not reply or not reply.media:
            await utils.answer(message, self.strings("no_reply"))
            return
        
        sticker_id = reply.media.document.id
        sticker_emoji = None
        
        for attr in reply.media.document.attributes:
            if hasattr(attr, "alt"):
                sticker_emoji = attr.alt
        
        if str(chat_id) not in self.config["banned_stickers"]:
            self.config["banned_stickers"][str(chat_id)] = []
        
        if sticker_id not in self.config["banned_stickers"][str(chat_id)]:
            self.config["banned_stickers"][str(chat_id)].append(sticker_id)
        
        await utils.answer(message, self.strings("banned_stick").format(sticker_emoji or ""))
    
    @loader.command(ru_doc="–£–±—Ä–∞—Ç—å –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ")
    async def unbanall(self, message):
        """Remove all emoji restrictions in this chat"""
        chat_id = utils.get_chat_id(message)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–º–æ–¥–∂–∏
        if chat_id in self.config["banned_chats_anim"]:
            self.config["banned_chats_anim"].remove(chat_id)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –æ–±—ã—á–Ω—ã—Ö —ç–º–æ–¥–∂–∏
        if chat_id in self.config["banned_chats_regular"]:
            self.config["banned_chats_regular"].remove(chat_id)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –ø–∞–∫–æ–≤
        if str(chat_id) in self.config["banned_packs"]:
            del self.config["banned_packs"][str(chat_id)]
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤
        if str(chat_id) in self.config["banned_stickers"]:
            del self.config["banned_stickers"][str(chat_id)]
        
        await utils.answer(message, self.strings("all_unbanned"))
    
    @loader.command(ru_doc="–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∂–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ")
    async def unbananim(self, message):
        """Unban animated emojis in this chat"""
        chat_id = utils.get_chat_id(message)
        
        if chat_id in self.config["banned_chats_anim"]:
            self.config["banned_chats_anim"].remove(chat_id)
        
        await utils.answer(message, self.strings("unbanned_anim"))
    
    @loader.command(ru_doc="–†–∞–∑–±–∞–Ω–∏—Ç—å –≤–µ—Å—å —ç–º–æ–¥–∂–∏–ø–∞–∫ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ")
    async def unbanpack(self, message):
        """Unban emoji pack in this chat"""
        chat_id = utils.get_chat_id(message)
        reply = await message.get_reply_message()
        
        if not reply or not reply.media:
            await utils.answer(message, self.strings("no_reply"))
            return
        
        if hasattr(reply.media, "document"):
            for attr in reply.media.document.attributes:
                if hasattr(attr, "stickerset") and attr.stickerset:
                    pack_id = attr.stickerset.id
                    pack_name = attr.stickerset.short_name
                    
                    if str(chat_id) in self.config["banned_packs"] and pack_id in self.config["banned_packs"][str(chat_id)]:
                        self.config["banned_packs"][str(chat_id)].remove(pack_id)
                        if not self.config["banned_packs"][str(chat_id)]:
                            del self.config["banned_packs"][str(chat_id)]
                    
                    await utils.answer(message, self.strings("unbanned_pack").format(pack_name))
                    return
        
        await utils.answer(message, self.strings("no_reply"))
    
    @loader.command(ru_doc="–†–∞–∑–±–∞–Ω–∏—Ç—å —ç–º–æ–¥–∂–∏ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ")
    async def unbanstick(self, message):
        """Unban emoji in this chat"""
        chat_id = utils.get_chat_id(message)
        reply = await message.get_reply_message()
        
        if not reply or not reply.media:
            await utils.answer(message, self.strings("no_reply"))
            return
        
        sticker_id = reply.media.document.id
        sticker_emoji = None
        
        for attr in reply.media.document.attributes:
            if hasattr(attr, "alt"):
                sticker_emoji = attr.alt
        
        if str(chat_id) in self.config["banned_stickers"] and sticker_id in self.config["banned_stickers"][str(chat_id)]:
            self.config["banned_stickers"][str(chat_id)].remove(sticker_id)
            if not self.config["banned_stickers"][str(chat_id)]:
                del self.config["banned_stickers"][str(chat_id)]
        
        await utils.answer(message, self.strings("unbanned_stick").format(sticker_emoji or ""))